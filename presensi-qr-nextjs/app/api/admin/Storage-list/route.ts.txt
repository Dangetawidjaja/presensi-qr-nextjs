export const runtime = 'nodejs';

import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

function authOk(req: NextRequest) {
  const provided = req.headers.get('x-admin-key') || '';
  const expected = process.env.ADMIN_KEY || '';
  return !!expected && provided === expected;
}

export async function GET(req: NextRequest) {
  if (!authOk(req)) return NextResponse.json({ ok: false, error: 'Unauthorized' }, { status: 401 });

  const SUPABASE_URL = process.env.SUPABASE_URL!;
  const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY!;
  if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
    return NextResponse.json({ ok: false, error: 'Server misconfigured' }, { status: 500 });
  }
  const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

  const { searchParams } = new URL(req.url);
  const event_id = searchParams.get('event_id') || '';

  const prefix = `qrs/${event_id}/`;
  const { data, error } = await supabase.storage.from('qrs').list(prefix, { limit: 1000 });
  if (error) return NextResponse.json({ ok: false, error: error.message });

  const base = `${SUPABASE_URL.replace(/\/+$/, '')}/storage/v1/object/public/qrs/${event_id}/`;
  const files = (data || []).map((f: any) => ({
    name: f.name,
    url: base + encodeURIComponent(f.name) // hanya berlaku jika bucket 'qrs' dibuat public
  }));

  return NextResponse.json({ ok: true, prefix, files });
}
